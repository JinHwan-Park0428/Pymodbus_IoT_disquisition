# --------------------------------------------------------------------------- # 
# 코드 동작에 필요한 import문을 추가
# --------------------------------------------------------------------------- #
import logging
import numpy as np
from pymodbus.constants import Endian
from pymodbus.payload import BinaryPayloadDecoder
from pymodbus.payload import BinaryPayloadBuilder
from pymodbus.client.sync import ModbusTcpClient as ModbusClient
from time import sleep
# --------------------------------------------------------------------------- # 
# WARNING 이상의 Log를 출력
# --------------------------------------------------------------------------- #
logging.basicConfig()
log = logging.getLogger()
log.setLevel(logging.ERROR)
# --------------------------------------------------------------------------- # 
# address, count, UNIT 을 미리 정의
# --------------------------------------------------------------------------- #
address = 0x00
count   = 5
UNIT = 0x1
# --------------------------------------------------------------------------- # 
# 클라이언트 정보를 설정해주고 서버와 연결
# --------------------------------------------------------------------------- #
client = ModbusClient('localhost', port=5020) 
client.connect() 
# --------------------------------------------------------------------------- # 
# 보내야하는 데이터를 CSV파일에서 읽어옴
# --------------------------------------------------------------------------- #
data = np.loadtxt("C:/Users/Jinhwan/pymodbus/examples/power3.csv", 
                      delimiter = ",")
Lst = data[ : 3,  : 5]
# --------------------------------------------------------------------------- # 
# 보내는 데이터의 형식(int, float 등)을 지정하기 위한 BinaryPayloadBuilder 호출
# --------------------------------------------------------------------------- #
builder = BinaryPayloadBuilder(byteorder=Endian.Big)
# --------------------------------------------------------------------------- # 
# CSV에서 읽어온 데이터를 정수화 시킨후 불러온 데이터 만큼 반복
# --------------------------------------------------------------------------- #
for line in Lst :
    line = list(map(int , line))
    # ----------------------------------------------------------------------- # 
    # 데이터의 형식 지정 (16bit int 형식)후 register로 보내기위한 과정
    # ----------------------------------------------------------------------- #   
    for a in line :
        builder.add_16bit_int(a)
    registers = builder.to_registers()
    # ----------------------------------------------------------------------- # 
    # 1초 간격으로 지정한 주소로 데이터를 포함시킨 registers를 UNIT값과 함께 전송
    # ----------------------------------------------------------------------- # 
    client.write_registers(address, registers, unit=UNIT)
    sleep(1)
    # ----------------------------------------------------------------------- # 
    # 서버로 전송하여 응답 받은 값을 저장
    # ----------------------------------------------------------------------- # 
    result  = client.read_holding_registers(address, count, unit=UNIT)
    # ----------------------------------------------------------------------- # 
    # 저장된 레지스터 값은 데이터 전송을 위해 변환된 값이므로 원래 값으로 전처리
    # 전처리 된 값을 출력
    # ----------------------------------------------------------------------- # 
    decoder = BinaryPayloadDecoder.fromRegisters(result.registers, byteorder=Endian.Big)
    Decode = []
    for i in range(0, 5) :
        a = decoder.decode_16bit_int()
        Decode.append(a)
    print("전송한 데이터 값 : {}".format(Decode))
    # --------------------------------------------------------------------------- # 
    # builder를 reset해주지 않으면 전에 전송된 값이 남아있을 수 있으므로 리셋
    # --------------------------------------------------------------------------- # 
    builder.reset()
# --------------------------------------------------------------------------- # 
# 작업이 끝나면 클라이언트 종료
# --------------------------------------------------------------------------- # 
client.close() # close the client